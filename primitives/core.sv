/**
 * Core primitives for Calyx.
 * Implements core primitives used by the compiler.
 *
 * Conventions:
 * - All parameter names must be SNAKE_CASE and all caps.
 * - Port names must be snake_case, no caps.
 */
`default_nettype none

// BEGIN GENERATED LAKEROAD CODE

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_add2_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  wire _7_;
  wire _8_;
  wire _9_;
  input [1:0] a;
  wire [1:0] a;
  input [1:0] b;
  wire [1:0] b;
  output [1:0] out0;
  wire [1:0] out0;
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_1_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_1_),
    .COUT(_7_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_9_),
    .S1(_8_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_7_),
    .COUT(_4_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_6_),
    .S1(_5_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_4_),
    .COUT(_3_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_2_),
    .S1(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_add32_2(a, b, out0);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  output [31:0] out0;
  wire [31:0] out0;
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_86_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_86_),
    .COUT(_58_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_10 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_00_),
    .COUT(_85_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[12]),
    .S1(out0[13])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_11 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_85_),
    .COUT(_84_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[14]),
    .S1(out0[15])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_12 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_81_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_83_),
    .S1(_82_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_13 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_81_),
    .COUT(_78_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_80_),
    .S1(_79_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_14 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_78_),
    .COUT(_74_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_76_),
    .S1(_75_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_15 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_74_),
    .COUT(_71_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_73_),
    .S1(_72_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_16 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_71_),
    .COUT(_68_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_70_),
    .S1(_69_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_17 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_68_),
    .COUT(_64_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_67_),
    .S1(_65_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_18 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_64_),
    .COUT(_61_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_63_),
    .S1(_62_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_19 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_61_),
    .COUT(_57_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_60_),
    .S1(_59_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_58_),
    .COUT(_32_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[4]),
    .S1(out0[5])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_20 (
    .A0(a[16]),
    .A1(a[17]),
    .B0(b[16]),
    .B1(b[17]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_57_),
    .COUT(_56_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[16]),
    .S1(out0[17])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_21 (
    .A0(a[18]),
    .A1(a[19]),
    .B0(b[18]),
    .B1(b[19]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_56_),
    .COUT(_54_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[18]),
    .S1(out0[19])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_22 (
    .A0(a[20]),
    .A1(a[21]),
    .B0(b[20]),
    .B1(b[21]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_54_),
    .COUT(_53_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[20]),
    .S1(out0[21])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_23 (
    .A0(a[22]),
    .A1(a[23]),
    .B0(b[22]),
    .B1(b[23]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_53_),
    .COUT(_52_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[22]),
    .S1(out0[23])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_24 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_49_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_51_),
    .S1(_50_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_25 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_49_),
    .COUT(_46_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_48_),
    .S1(_47_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_26 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_46_),
    .COUT(_42_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_45_),
    .S1(_43_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_27 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_42_),
    .COUT(_39_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_41_),
    .S1(_40_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_28 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_39_),
    .COUT(_36_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_38_),
    .S1(_37_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_29 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_36_),
    .COUT(_30_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_35_),
    .S1(_34_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_32_),
    .COUT(_31_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[6]),
    .S1(out0[7])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_30 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_30_),
    .COUT(_27_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_29_),
    .S1(_28_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_31 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_27_),
    .COUT(_24_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_26_),
    .S1(_25_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_32 (
    .A0(a[16]),
    .A1(a[17]),
    .B0(b[16]),
    .B1(b[17]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_24_),
    .COUT(_20_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_23_),
    .S1(_21_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_33 (
    .A0(a[18]),
    .A1(a[19]),
    .B0(b[18]),
    .B1(b[19]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_20_),
    .COUT(_17_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_19_),
    .S1(_18_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_34 (
    .A0(a[20]),
    .A1(a[21]),
    .B0(b[20]),
    .B1(b[21]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_17_),
    .COUT(_14_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_16_),
    .S1(_15_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_35 (
    .A0(a[22]),
    .A1(a[23]),
    .B0(b[22]),
    .B1(b[23]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_14_),
    .COUT(_10_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_13_),
    .S1(_12_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_36 (
    .A0(a[24]),
    .A1(a[25]),
    .B0(b[24]),
    .B1(b[25]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_10_),
    .COUT(_09_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[24]),
    .S1(out0[25])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_37 (
    .A0(a[26]),
    .A1(a[27]),
    .B0(b[26]),
    .B1(b[27]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_09_),
    .COUT(_08_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[26]),
    .S1(out0[27])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_38 (
    .A0(a[28]),
    .A1(a[29]),
    .B0(b[28]),
    .B1(b[29]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_08_),
    .COUT(_07_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[28]),
    .S1(out0[29])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_39 (
    .A0(a[30]),
    .A1(a[31]),
    .B0(b[30]),
    .B1(b[31]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_07_),
    .COUT(_06_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[30]),
    .S1(out0[31])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_4 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_03_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_05_),
    .S1(_04_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_5 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_03_),
    .COUT(_87_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_02_),
    .S1(_01_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_6 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_87_),
    .COUT(_55_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_77_),
    .S1(_66_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_7 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_55_),
    .COUT(_22_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_44_),
    .S1(_33_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_8 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_22_),
    .COUT(_11_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[8]),
    .S1(out0[9])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_9 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_11_),
    .COUT(_00_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[10]),
    .S1(out0[11])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_add3_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  wire _7_;
  wire _8_;
  input [2:0] a;
  wire [2:0] a;
  input [2:0] b;
  wire [2:0] b;
  output [2:0] out0;
  wire [2:0] out0;
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_8_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(1'h0),
    .B0(b[2]),
    .B1(1'h0),
    .C0(1'h1),
    .C1(1'h0),
    .CIN(_8_),
    .COUT(_6_),
    .D0(1'h1),
    .D1(1'h0),
    .S0(out0[2]),
    .S1(_7_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_6_),
    .COUT(_3_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_5_),
    .S1(_4_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_1_),
    .S1(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_add4_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  wire _7_;
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  output [3:0] out0;
  wire [3:0] out0;
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_7_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_7_),
    .COUT(_6_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_6_),
    .COUT(_3_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_5_),
    .S1(_4_)
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_1_),
    .S1(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_add8_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  output [7:0] out0;
  wire [7:0] out0;
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h0),
    .COUT(_3_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_2_),
    .COUT(_1_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[4]),
    .S1(out0[5])
  );
  CCU2C #(
    .INIT0(16'h6ffe),
    .INIT1(16'h6ffe),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_1_),
    .COUT(_0_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[6]),
    .S1(out0[7])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_and32_2(a, b, out0);
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  output [31:0] out0;
  wire [31:0] out0;
  LUT4 #(
    .INIT(16'h8fff)
  ) A_LUT_0 (
    .A(a[0]),
    .B(b[0]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[0])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) A_LUT_16 (
    .A(a[16]),
    .B(b[16]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[16])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) A_LUT_24 (
    .A(a[24]),
    .B(b[24]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[24])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) A_LUT_8 (
    .A(a[8]),
    .B(b[8]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[8])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) B_LUT_1 (
    .A(a[1]),
    .B(b[1]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[1])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) B_LUT_17 (
    .A(a[17]),
    .B(b[17]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[17])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) B_LUT_25 (
    .A(a[25]),
    .B(b[25]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[25])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) B_LUT_9 (
    .A(a[9]),
    .B(b[9]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[9])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) C_LUT_10 (
    .A(a[10]),
    .B(b[10]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[10])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) C_LUT_18 (
    .A(a[18]),
    .B(b[18]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[18])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) C_LUT_2 (
    .A(a[2]),
    .B(b[2]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[2])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) C_LUT_26 (
    .A(a[26]),
    .B(b[26]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[26])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) D_LUT_11 (
    .A(a[11]),
    .B(b[11]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[11])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) D_LUT_19 (
    .A(a[19]),
    .B(b[19]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[19])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) D_LUT_27 (
    .A(a[27]),
    .B(b[27]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[27])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) D_LUT_3 (
    .A(a[3]),
    .B(b[3]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[3])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) E_LUT_12 (
    .A(a[12]),
    .B(b[12]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[12])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) E_LUT_20 (
    .A(a[20]),
    .B(b[20]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[20])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) E_LUT_28 (
    .A(a[28]),
    .B(b[28]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[28])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) E_LUT_4 (
    .A(a[4]),
    .B(b[4]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[4])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) F_LUT_13 (
    .A(a[13]),
    .B(b[13]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[13])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) F_LUT_21 (
    .A(a[21]),
    .B(b[21]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[21])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) F_LUT_29 (
    .A(a[29]),
    .B(b[29]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[29])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) F_LUT_5 (
    .A(a[5]),
    .B(b[5]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[5])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) G_LUT_14 (
    .A(a[14]),
    .B(b[14]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[14])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) G_LUT_22 (
    .A(a[22]),
    .B(b[22]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[22])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) G_LUT_30 (
    .A(a[30]),
    .B(b[30]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[30])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) G_LUT_6 (
    .A(a[6]),
    .B(b[6]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[6])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) H_LUT_15 (
    .A(a[15]),
    .B(b[15]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[15])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) H_LUT_23 (
    .A(a[23]),
    .B(b[23]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[23])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) H_LUT_31 (
    .A(a[31]),
    .B(b[31]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[31])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) H_LUT_7 (
    .A(a[7]),
    .B(b[7]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[7])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_and8_2(a, b, out0);
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  output [7:0] out0;
  wire [7:0] out0;
  LUT4 #(
    .INIT(16'h8fff)
  ) A_LUT_0 (
    .A(a[0]),
    .B(b[0]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[0])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) B_LUT_1 (
    .A(a[1]),
    .B(b[1]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[1])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) C_LUT_2 (
    .A(a[2]),
    .B(b[2]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[2])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) D_LUT_3 (
    .A(a[3]),
    .B(b[3]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[3])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) E_LUT_4 (
    .A(a[4]),
    .B(b[4]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[4])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) F_LUT_5 (
    .A(a[5]),
    .B(b[5]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[5])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) G_LUT_6 (
    .A(a[6]),
    .B(b[6]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[6])
  );
  LUT4 #(
    .INIT(16'h8fff)
  ) H_LUT_7 (
    .A(a[7]),
    .B(b[7]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[7])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_not1_2(a, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  input a;
  wire a;
  output out0;
  wire out0;
  LUT4 #(
    .INIT(16'h7fff)
  ) A_LUT_0 (
    .A(a),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) B_LUT_1 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_6_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) C_LUT_2 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_5_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) D_LUT_3 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_4_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) E_LUT_4 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_3_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) F_LUT_5 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_2_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) G_LUT_6 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_1_)
  );
  LUT4 #(
    .INIT(16'h0000)
  ) H_LUT_7 (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .D(1'h0),
    .Z(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_not8_2(a, out0);
  input [7:0] a;
  wire [7:0] a;
  output [7:0] out0;
  wire [7:0] out0;
  LUT4 #(
    .INIT(16'h7fff)
  ) A_LUT_0 (
    .A(a[0]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[0])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) B_LUT_1 (
    .A(a[1]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[1])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) C_LUT_2 (
    .A(a[2]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[2])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) D_LUT_3 (
    .A(a[3]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[3])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) E_LUT_4 (
    .A(a[4]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[4])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) F_LUT_5 (
    .A(a[5]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[5])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) G_LUT_6 (
    .A(a[6]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[6])
  );
  LUT4 #(
    .INIT(16'h7fff)
  ) H_LUT_7 (
    .A(a[7]),
    .B(1'h1),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[7])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_or8_2(a, b, out0);
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  output [7:0] out0;
  wire [7:0] out0;
  LUT4 #(
    .INIT(16'hefff)
  ) A_LUT_0 (
    .A(a[0]),
    .B(b[0]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[0])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) B_LUT_1 (
    .A(a[1]),
    .B(b[1]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[1])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) C_LUT_2 (
    .A(a[2]),
    .B(b[2]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[2])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) D_LUT_3 (
    .A(a[3]),
    .B(b[3]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[3])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) E_LUT_4 (
    .A(a[4]),
    .B(b[4]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[4])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) F_LUT_5 (
    .A(a[5]),
    .B(b[5]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[5])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) G_LUT_6 (
    .A(a[6]),
    .B(b[6]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[6])
  );
  LUT4 #(
    .INIT(16'hefff)
  ) H_LUT_7 (
    .A(a[7]),
    .B(b[7]),
    .C(1'h1),
    .D(1'h1),
    .Z(out0[7])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_sub32_2(a, b, out0);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  output [31:0] out0;
  wire [31:0] out0;
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_86_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_86_),
    .COUT(_58_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_10 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_00_),
    .COUT(_85_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[12]),
    .S1(out0[13])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_11 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_85_),
    .COUT(_84_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[14]),
    .S1(out0[15])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_12 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_81_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_83_),
    .S1(_82_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_13 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_81_),
    .COUT(_78_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_80_),
    .S1(_79_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_14 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_78_),
    .COUT(_74_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_76_),
    .S1(_75_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_15 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_74_),
    .COUT(_71_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_73_),
    .S1(_72_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_16 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_71_),
    .COUT(_68_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_70_),
    .S1(_69_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_17 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_68_),
    .COUT(_64_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_67_),
    .S1(_65_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_18 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_64_),
    .COUT(_61_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_63_),
    .S1(_62_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_19 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_61_),
    .COUT(_57_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_60_),
    .S1(_59_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_58_),
    .COUT(_32_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[4]),
    .S1(out0[5])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_20 (
    .A0(a[16]),
    .A1(a[17]),
    .B0(b[16]),
    .B1(b[17]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_57_),
    .COUT(_56_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[16]),
    .S1(out0[17])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_21 (
    .A0(a[18]),
    .A1(a[19]),
    .B0(b[18]),
    .B1(b[19]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_56_),
    .COUT(_54_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[18]),
    .S1(out0[19])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_22 (
    .A0(a[20]),
    .A1(a[21]),
    .B0(b[20]),
    .B1(b[21]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_54_),
    .COUT(_53_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[20]),
    .S1(out0[21])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_23 (
    .A0(a[22]),
    .A1(a[23]),
    .B0(b[22]),
    .B1(b[23]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_53_),
    .COUT(_52_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[22]),
    .S1(out0[23])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_24 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_49_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_51_),
    .S1(_50_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_25 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_49_),
    .COUT(_46_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_48_),
    .S1(_47_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_26 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_46_),
    .COUT(_42_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_45_),
    .S1(_43_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_27 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_42_),
    .COUT(_39_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_41_),
    .S1(_40_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_28 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_39_),
    .COUT(_36_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_38_),
    .S1(_37_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_29 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_36_),
    .COUT(_30_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_35_),
    .S1(_34_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_32_),
    .COUT(_31_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[6]),
    .S1(out0[7])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_30 (
    .A0(a[12]),
    .A1(a[13]),
    .B0(b[12]),
    .B1(b[13]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_30_),
    .COUT(_27_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_29_),
    .S1(_28_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_31 (
    .A0(a[14]),
    .A1(a[15]),
    .B0(b[14]),
    .B1(b[15]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_27_),
    .COUT(_24_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_26_),
    .S1(_25_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_32 (
    .A0(a[16]),
    .A1(a[17]),
    .B0(b[16]),
    .B1(b[17]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_24_),
    .COUT(_20_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_23_),
    .S1(_21_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_33 (
    .A0(a[18]),
    .A1(a[19]),
    .B0(b[18]),
    .B1(b[19]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_20_),
    .COUT(_17_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_19_),
    .S1(_18_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_34 (
    .A0(a[20]),
    .A1(a[21]),
    .B0(b[20]),
    .B1(b[21]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_17_),
    .COUT(_14_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_16_),
    .S1(_15_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_35 (
    .A0(a[22]),
    .A1(a[23]),
    .B0(b[22]),
    .B1(b[23]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_14_),
    .COUT(_10_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_13_),
    .S1(_12_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_36 (
    .A0(a[24]),
    .A1(a[25]),
    .B0(b[24]),
    .B1(b[25]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_10_),
    .COUT(_09_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[24]),
    .S1(out0[25])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_37 (
    .A0(a[26]),
    .A1(a[27]),
    .B0(b[26]),
    .B1(b[27]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_09_),
    .COUT(_08_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[26]),
    .S1(out0[27])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_38 (
    .A0(a[28]),
    .A1(a[29]),
    .B0(b[28]),
    .B1(b[29]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_08_),
    .COUT(_07_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[28]),
    .S1(out0[29])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_39 (
    .A0(a[30]),
    .A1(a[31]),
    .B0(b[30]),
    .B1(b[31]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_07_),
    .COUT(_06_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[30]),
    .S1(out0[31])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_4 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_03_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_05_),
    .S1(_04_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_5 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_03_),
    .COUT(_87_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_02_),
    .S1(_01_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_6 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_87_),
    .COUT(_55_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_77_),
    .S1(_66_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_7 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_55_),
    .COUT(_22_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(_44_),
    .S1(_33_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_8 (
    .A0(a[8]),
    .A1(a[9]),
    .B0(b[8]),
    .B1(b[9]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_22_),
    .COUT(_11_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[8]),
    .S1(out0[9])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_9 (
    .A0(a[10]),
    .A1(a[11]),
    .B0(b[10]),
    .B1(b[11]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_11_),
    .COUT(_00_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[10]),
    .S1(out0[11])
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_sub5_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  input [4:0] a;
  wire [4:0] a;
  input [4:0] b;
  wire [4:0] b;
  output [4:0] out0;
  wire [4:0] out0;
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_6_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_6_),
    .COUT(_5_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(1'h0),
    .B0(b[4]),
    .B1(1'h0),
    .C0(1'h1),
    .C1(1'h0),
    .CIN(_5_),
    .COUT(_3_),
    .D0(1'h1),
    .D1(1'h0),
    .S0(out0[4]),
    .S1(_4_)
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_1_),
    .S1(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_sub6_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input [5:0] a;
  wire [5:0] a;
  input [5:0] b;
  wire [5:0] b;
  output [5:0] out0;
  wire [5:0] out0;
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_5_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_5_),
    .COUT(_4_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_4_),
    .COUT(_3_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[4]),
    .S1(out0[5])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(1'h0),
    .A1(1'h0),
    .B0(1'h0),
    .B1(1'h0),
    .C0(1'h0),
    .C1(1'h0),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h0),
    .D1(1'h0),
    .S0(_1_),
    .S1(_0_)
  );
endmodule

/* Generated by Yosys 0.16+41 (git sha1 29c0a5958, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

module lakeroad_lattice_ecp5_sub8_2(a, b, out0);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  output [7:0] out0;
  wire [7:0] out0;
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_0 (
    .A0(a[0]),
    .A1(a[1]),
    .B0(b[0]),
    .B1(b[1]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(1'h1),
    .COUT(_3_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[0]),
    .S1(out0[1])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_1 (
    .A0(a[2]),
    .A1(a[3]),
    .B0(b[2]),
    .B1(b[3]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_3_),
    .COUT(_2_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[2]),
    .S1(out0[3])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_2 (
    .A0(a[4]),
    .A1(a[5]),
    .B0(b[4]),
    .B1(b[5]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_2_),
    .COUT(_1_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[4]),
    .S1(out0[5])
  );
  CCU2C #(
    .INIT0(16'h9ffb),
    .INIT1(16'h9ffb),
    .INJECT1_0("NO"),
    .INJECT1_1("NO")
  ) CCU2C_3 (
    .A0(a[6]),
    .A1(a[7]),
    .B0(b[6]),
    .B1(b[7]),
    .C0(1'h1),
    .C1(1'h1),
    .CIN(_1_),
    .COUT(_0_),
    .D0(1'h1),
    .D1(1'h1),
    .S0(out0[6]),
    .S1(out0[7])
  );
endmodule


// END GENERATED LAKEROAD CODE
module std_const #(
    parameter WIDTH = 32,
    parameter VALUE = 0
) (
   output logic [WIDTH - 1:0] out
);
  assign out = VALUE;
endmodule

module std_wire #(
  parameter WIDTH = 32
) (
  input wire logic [WIDTH - 1:0] in,
  output logic [WIDTH - 1:0] out
);
  assign out = in;
endmodule

module std_slice #(
    parameter IN_WIDTH  = 32,
    parameter OUT_WIDTH = 32
) (
   input wire                   logic [ IN_WIDTH-1:0] in,
   output logic [OUT_WIDTH-1:0] out
);
  assign out = in[OUT_WIDTH-1:0];

  `ifdef VERILATOR
    always_comb begin
      if (IN_WIDTH < OUT_WIDTH)
        $error(
          "std_slice: Input width less than output width\n",
          "IN_WIDTH: %0d", IN_WIDTH,
          "OUT_WIDTH: %0d", OUT_WIDTH
        );
    end
  `endif
endmodule

module std_pad #(
    parameter IN_WIDTH  = 32,
    parameter OUT_WIDTH = 32
) (
   input wire logic [IN_WIDTH-1:0]  in,
   output logic     [OUT_WIDTH-1:0] out
);
  localparam EXTEND = OUT_WIDTH - IN_WIDTH;
  assign out = { {EXTEND {1'b0}}, in};

  `ifdef VERILATOR
    always_comb begin
      if (IN_WIDTH > OUT_WIDTH)
        $error(
          "std_pad: Output width less than input width\n",
          "IN_WIDTH: %0d", IN_WIDTH,
          "OUT_WIDTH: %0d", OUT_WIDTH
        );
    end
  `endif
endmodule

module std_not #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] in,
   output logic [WIDTH-1:0] out
);
  if (WIDTH == 1) begin
    lakeroad_lattice_ecp5_not1 _impl(in, out);
  end
  else if (WIDTH == 8) begin
    lakeroad_lattice_ecp5_not8 _impl(in, out);
  end
  else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  end
endmodule

module std_and #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  if (WIDTH == 1) begin
    lakeroad_lattice_ecp5_and1 _impl(left, right, out);
  end
  else if (WIDTH == 8) begin
    lakeroad_lattice_ecp5_and8 _impl(left, right, out);
  end
  else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  end
endmodule

module std_or #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  if (WIDTH == 1) begin
    lakeroad_lattice_ecp5_or1 _impl(left, right, out);
  end
  else if (WIDTH == 8) begin
    lakeroad_lattice_ecp5_or8 _impl(left, right, out);
  end
  else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  end
endmodule

module std_xor #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  // if (WIDTH == 1) begin
  //   lakeroad_lattice_ecp5_or1 _impl(left, right, out);
  // end
  // else if (WIDTH == 8) begin
  //   lakeroad_lattice_ecp5_or8 _impl(left, right, out);
  // end
  // else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  // end
endmodule
endmodule

module std_add #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  if (WIDTH == 1) begin
    lakeroad_lattice_ecp5_add1 _impl(left, right, out);
  end
  else if (WIDTH == 8) begin
    lakeroad_lattice_ecp5_add8 _impl(left, right, out);
  end
  else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  end

endmodule

module std_sub #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  if (WIDTH == 1) begin
    lakeroad_lattice_ecp5_sub1 _impl(left, right, out);
  end
  else if (WIDTH == 8) begin
    lakeroad_lattice_ecp5_sub8 _impl(left, right, out);
  end
  else begin
    $error("Unsupported bitwidth %0d", WIDTH);
  end
endmodule

module std_gt #(
    parameter WIDTH = 32
) (
   input wire   logic [WIDTH-1:0] left,
   input wire   logic [WIDTH-1:0] right,
   output logic out
);
  assign out = left > right;
endmodule

module std_lt #(
    parameter WIDTH = 32
) (
   input wire   logic [WIDTH-1:0] left,
   input wire   logic [WIDTH-1:0] right,
   output logic out
);
  assign out = left < right;
endmodule

module std_eq #(
    parameter WIDTH = 32
) (
   input wire   logic [WIDTH-1:0] left,
   input wire   logic [WIDTH-1:0] right,
   output logic out
);
  assign out = left == right;
endmodule

module std_neq #(
    parameter WIDTH = 32
) (
   input wire   logic [WIDTH-1:0] left,
   input wire   logic [WIDTH-1:0] right,
   output logic out
);
  assign out = left != right;
endmodule

module std_ge #(
    parameter WIDTH = 32
) (
    input wire   logic [WIDTH-1:0] left,
    input wire   logic [WIDTH-1:0] right,
    output logic out
);
  assign out = left >= right;
endmodule

module std_le #(
    parameter WIDTH = 32
) (
   input wire   logic [WIDTH-1:0] left,
   input wire   logic [WIDTH-1:0] right,
   output logic out
);
  assign out = left <= right;
endmodule

module std_lsh #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  assign out = left << right;
endmodule

module std_rsh #(
    parameter WIDTH = 32
) (
   input wire               logic [WIDTH-1:0] left,
   input wire               logic [WIDTH-1:0] right,
   output logic [WIDTH-1:0] out
);
  assign out = left >> right;
endmodule

/// this primitive is intended to be used
/// for lowering purposes (not in source programs)
module std_mux #(
    parameter WIDTH = 32
) (
   input wire               logic cond,
   input wire               logic [WIDTH-1:0] tru,
   input wire               logic [WIDTH-1:0] fal,
   output logic [WIDTH-1:0] out
);
  assign out = cond ? tru : fal;
endmodule

/// Memories
module std_reg #(
    parameter WIDTH = 32
) (
   input wire [ WIDTH-1:0]    in,
   input wire                 write_en,
   input wire                 clk,
   input wire                 reset,
    // output
   output logic [WIDTH - 1:0] out,
   output logic               done
);

  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 0;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
endmodule

module std_mem_d1 #(
    parameter WIDTH = 32,
    parameter SIZE = 16,
    parameter IDX_SIZE = 4
) (
   input wire                logic [IDX_SIZE-1:0] addr0,
   input wire                logic [ WIDTH-1:0] write_data,
   input wire                logic write_en,
   input wire                logic clk,
   output logic [ WIDTH-1:0] read_data,
   output logic              done
);

  logic [WIDTH-1:0] mem[SIZE-1:0];

  /* verilator lint_off WIDTH */
  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else done <= 1'd0;
  end

  // Check for out of bounds access
  `ifdef VERILATOR
    always_comb begin
      if (addr0 >= SIZE)
        $error(
          "std_mem_d1: Out of bounds access\n",
          "addr0: %0d\n", addr0,
          "SIZE: %0d", SIZE
        );
    end
  `endif
endmodule

module std_mem_d2 #(
    parameter WIDTH = 32,
    parameter D0_SIZE = 16,
    parameter D1_SIZE = 16,
    parameter D0_IDX_SIZE = 4,
    parameter D1_IDX_SIZE = 4
) (
   input wire                logic [D0_IDX_SIZE-1:0] addr0,
   input wire                logic [D1_IDX_SIZE-1:0] addr1,
   input wire                logic [ WIDTH-1:0] write_data,
   input wire                logic write_en,
   input wire                logic clk,
   output logic [ WIDTH-1:0] read_data,
   output logic              done
);

  /* verilator lint_off WIDTH */
  logic [WIDTH-1:0] mem[D0_SIZE-1:0][D1_SIZE-1:0];

  assign read_data = mem[addr0][addr1];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1] <= write_data;
      done <= 1'd1;
    end else done <= 1'd0;
  end

  // Check for out of bounds access
  `ifdef VERILATOR
    always_comb begin
      if (addr0 >= D0_SIZE)
        $error(
          "std_mem_d2: Out of bounds access\n",
          "addr0: %0d\n", addr0,
          "D0_SIZE: %0d", D0_SIZE
        );
      if (addr1 >= D1_SIZE)
        $error(
          "std_mem_d2: Out of bounds access\n",
          "addr1: %0d\n", addr1,
          "D1_SIZE: %0d", D1_SIZE
        );
    end
  `endif
endmodule

module std_mem_d3 #(
    parameter WIDTH = 32,
    parameter D0_SIZE = 16,
    parameter D1_SIZE = 16,
    parameter D2_SIZE = 16,
    parameter D0_IDX_SIZE = 4,
    parameter D1_IDX_SIZE = 4,
    parameter D2_IDX_SIZE = 4
) (
   input wire                logic [D0_IDX_SIZE-1:0] addr0,
   input wire                logic [D1_IDX_SIZE-1:0] addr1,
   input wire                logic [D2_IDX_SIZE-1:0] addr2,
   input wire                logic [ WIDTH-1:0] write_data,
   input wire                logic write_en,
   input wire                logic clk,
   output logic [ WIDTH-1:0] read_data,
   output logic              done
);

  /* verilator lint_off WIDTH */
  logic [WIDTH-1:0] mem[D0_SIZE-1:0][D1_SIZE-1:0][D2_SIZE-1:0];

  assign read_data = mem[addr0][addr1][addr2];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1][addr2] <= write_data;
      done <= 1'd1;
    end else done <= 1'd0;
  end

  // Check for out of bounds access
  `ifdef VERILATOR
    always_comb begin
      if (addr0 >= D0_SIZE)
        $error(
          "std_mem_d3: Out of bounds access\n",
          "addr0: %0d\n", addr0,
          "D0_SIZE: %0d", D0_SIZE
        );
      if (addr1 >= D1_SIZE)
        $error(
          "std_mem_d3: Out of bounds access\n",
          "addr1: %0d\n", addr1,
          "D1_SIZE: %0d", D1_SIZE
        );
      if (addr2 >= D2_SIZE)
        $error(
          "std_mem_d3: Out of bounds access\n",
          "addr2: %0d\n", addr2,
          "D2_SIZE: %0d", D2_SIZE
        );
    end
  `endif
endmodule

module std_mem_d4 #(
    parameter WIDTH = 32,
    parameter D0_SIZE = 16,
    parameter D1_SIZE = 16,
    parameter D2_SIZE = 16,
    parameter D3_SIZE = 16,
    parameter D0_IDX_SIZE = 4,
    parameter D1_IDX_SIZE = 4,
    parameter D2_IDX_SIZE = 4,
    parameter D3_IDX_SIZE = 4
) (
   input wire                logic [D0_IDX_SIZE-1:0] addr0,
   input wire                logic [D1_IDX_SIZE-1:0] addr1,
   input wire                logic [D2_IDX_SIZE-1:0] addr2,
   input wire                logic [D3_IDX_SIZE-1:0] addr3,
   input wire                logic [ WIDTH-1:0] write_data,
   input wire                logic write_en,
   input wire                logic clk,
   output logic [ WIDTH-1:0] read_data,
   output logic              done
);

  /* verilator lint_off WIDTH */
  logic [WIDTH-1:0] mem[D0_SIZE-1:0][D1_SIZE-1:0][D2_SIZE-1:0][D3_SIZE-1:0];

  assign read_data = mem[addr0][addr1][addr2][addr3];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1][addr2][addr3] <= write_data;
      done <= 1'd1;
    end else done <= 1'd0;
  end

  // Check for out of bounds access
  `ifdef VERILATOR
    always_comb begin
      if (addr0 >= D0_SIZE)
        $error(
          "std_mem_d4: Out of bounds access\n",
          "addr0: %0d\n", addr0,
          "D0_SIZE: %0d", D0_SIZE
        );
      if (addr1 >= D1_SIZE)
        $error(
          "std_mem_d4: Out of bounds access\n",
          "addr1: %0d\n", addr1,
          "D1_SIZE: %0d", D1_SIZE
        );
      if (addr2 >= D2_SIZE)
        $error(
          "std_mem_d4: Out of bounds access\n",
          "addr2: %0d\n", addr2,
          "D2_SIZE: %0d", D2_SIZE
        );
      if (addr3 >= D3_SIZE)
        $error(
          "std_mem_d4: Out of bounds access\n",
          "addr3: %0d\n", addr3,
          "D3_SIZE: %0d", D3_SIZE
        );
    end
  `endif
endmodule

`default_nettype wire
